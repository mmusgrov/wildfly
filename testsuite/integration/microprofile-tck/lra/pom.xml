<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss, Home of Professional Open Source.
  ~ Copyright 2021, Red Hat, Inc., and individual contributors
  ~ as indicated by the @author tags. See the copyright.txt file in the
  ~ distribution for a full listing of individual contributors.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.wildfly</groupId>
        <artifactId>wildfly-ts-integ-mp</artifactId>
        <!--
        Maintain separation between the artifact id and the version to help prevent
        merge conflicts between commits changing the GA and those changing the V.
        -->
        <version>25.0.0.Final-SNAPSHOT</version>
    </parent>

    <artifactId>wildfly-ts-integ-mp-lra</artifactId>
    <name>WildFly Test Suite: Integration - MicroProfile TCK - LRA</name>

    <properties>
        <version.org.jboss.shrinkwrap.resolvers>3.1.4</version.org.jboss.shrinkwrap.resolvers>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jbossas.ts.integ.dir>${basedir}/../..</jbossas.ts.integ.dir>
        <jbossas.ts.dir>${jbossas.ts.integ.dir}/..</jbossas.ts.dir>
        <jbossas.project.dir>${jbossas.ts.dir}/..</jbossas.project.dir>
        <wildfly.build.output.dir>build/target/${server.output.dir.prefix}-${server.output.dir.version}</wildfly.build.output.dir>
        <ts.copy-wildfly.phase>none</ts.copy-wildfly.phase>
        <ts.microprofile-tck-provisioning.phase>compile</ts.microprofile-tck-provisioning.phase>
        <!-- These properties control what layers are provisioned if galleon provision occurs -->
        <ts.microprofile-tck-provisioning.base.layer>cloud-server</ts.microprofile-tck-provisioning.base.layer>
        <ts.microprofile-tck-provisioning.decorator.layer.participant>microprofile-lra-participant</ts.microprofile-tck-provisioning.decorator.layer.participant>
        <ts.microprofile-tck-provisioning.decorator.layer.coordinator>microprofile-lra-coordinator</ts.microprofile-tck-provisioning.decorator.layer.coordinator>
        <lra.coordinator.url>http://127.0.0.1:8080/lra-coordinator/lra-coordinator</lra.coordinator.url>
        <lra.tck.base.url>http://127.0.0.1:8080</lra.tck.base.url>
        <lra.http.recovery.host>127.0.0.1</lra.http.recovery.host>
        <lra.http.recovery.port>8080</lra.http.recovery.port>
        <lra.http.recovery.path>/lra-coordinator/lra-coordinator/recovery</lra.http.recovery.path>
        <lra.tck.timeout.factor>1.5</lra.tck.timeout.factor>
        <management.address>127.0.0.1</management.address>
        <management.port>9990</management.port>
        <connect.to.server>true</connect.to.server>
        <wait.for.ports>9990</wait.for.ports>
        <port.waiting.timeout>10</port.waiting.timeout>
        <debug.server.args></debug.server.args>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.eclipse.microprofile.lra</groupId>
            <artifactId>microprofile-lra-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.lra</groupId>
            <artifactId>microprofile-lra-tck</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.narayana.rts</groupId>
            <artifactId>lra-test-arquillian-extension</artifactId>
            <version>${version.org.jboss.narayana}</version>
            <scope>test</scope>
        </dependency>
       <!-- Jakarta RESTful Web Services Client implementation -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-core-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-core-spi</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jboss.galleon</groupId>
                <artifactId>galleon-maven-plugin</artifactId>
                <executions>
                    <!-- Provision a server slimmed to only what we want for a particular TCK. -->
                    <execution>
                        <id>microprofile-tck-provisioning</id>
                        <goals>
                            <goal>provision</goal>
                        </goals>
                        <!-- Use a property to drive whether this execution is enabled.
                             Default is 'none', i.e. disabled. -->
                        <phase>${ts.microprofile-tck-provisioning.phase}</phase>
                        <configuration>
                            <install-dir>${project.build.directory}/wildfly</install-dir>
                            <record-state>false</record-state>
                            <log-time>${galleon.log.time}</log-time>
                            <offline>${galleon.offline}</offline>
                            <plugin-options>
                                <jboss-maven-dist/>
                                <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                <optional-packages>passive+</optional-packages>
                            </plugin-options>
                            <feature-packs>
                                <feature-pack>
                                    <!-- Child modules can set properties to override what feature pack is used -->
                                    <groupId>${ts.microprofile-tck-provisioning.fp.groupId}</groupId>
                                    <artifactId>${ts.microprofile-tck-provisioning.fp.artifactId}</artifactId>
                                    <version>${ts.microprofile-tck-provisioning.fp.version}</version>
                                    <inherit-configs>false</inherit-configs>
                                    <inherit-packages>false</inherit-packages>
                                </feature-pack>
                            </feature-packs>
                            <configurations>
                                <config>
                                    <model>standalone</model>
                                    <!-- Call the file standalone-microprofile.xml as that is what
                                         arquillian.xml says to use for testing in the default maven profile-->
                                    <name>standalone-microprofile.xml</name>
                                    <layers>
                                        <!-- Child modules would set properties to drive the desired layers -->
                                        <layer>${ts.microprofile-tck-provisioning.base.layer}</layer>
                                        <layer>${ts.microprofile-tck-provisioning.decorator.layer.participant}</layer>
                                        <layer>${ts.microprofile-tck-provisioning.decorator.layer.coordinator}</layer>
                                    </layers>
                                </config>
                            </configurations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-jar-maven-plugin</artifactId>
                <version>${version.org.wildfly.jar.plugin}</version>
                <executions>
                    <execution>
                        <id>bootable-jar-microprofile-tck-packaging</id>
                        <goals>
                            <goal>package</goal>
                        </goals>
                        <phase>${ts.bootable-jar-microprofile-tck-packaging.phase}</phase>
                        <configuration>
                            <output-file-name>test-wildfly-microprofile-tck.jar</output-file-name>
                            <hollowJar>true</hollowJar>
                            <record-state>false</record-state>
                            <log-time>${galleon.log.time}</log-time>
                            <offline>true</offline>
                            <plugin-options>
                                <jboss-maven-dist/>
                                <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                            </plugin-options>
                            <feature-packs>
                                <feature-pack>
                                    <!-- Child modules can set properties to override what feature pack is used -->
                                    <groupId>${ts.microprofile-tck-provisioning.fp.groupId}</groupId>
                                    <artifactId>${ts.microprofile-tck-provisioning.fp.artifactId}</artifactId>
                                    <version>${ts.microprofile-tck-provisioning.fp.version}</version>
                                </feature-pack>
                            </feature-packs>
                            <layers>
                                <!-- Child modules would set properties to drive the desired layers -->
                                <layer>${ts.microprofile-tck-provisioning.base.layer}</layer>
                                <layer>${ts.microprofile-tck-provisioning.decorator.layer.participant}</layer>
                                <layer>${ts.microprofile-tck-provisioning.decorator.layer.coordinator}</layer>
                            </layers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <dependenciesToScan>
                        <dependency>org.eclipse.microprofile.lra:microprofile-lra-tck</dependency>
                    </dependenciesToScan>
                    <includes>
                        <include>**/*Test*.java</include>
                    </includes>
                    <systemPropertyVariables>
                        <lra.tck.timeout.factor>${lra.tck.timeout.factor}</lra.tck.timeout.factor>
                        <microprofile.jvm.args>${microprofile.jvm.args} ${surefire.jpda.args} ${debug.server.args}</microprofile.jvm.args>
                        <!-- Override the standard module path that points at the shared module set from servlet-dist -->
                        <module.path>${project.build.directory}/wildfly/modules</module.path>
                        <lra.coordinator.url>${lra.coordinator.url}</lra.coordinator.url>
                        <management.address>${management.address}</management.address>
                        <management.port>${management.port}</management.port>
                        <allow.connect.to.server>${connect.to.server}</allow.connect.to.server>
                        <wait.for.ports>${wait.for.ports}</wait.for.ports>
                        <port.waiting.timeout>${port.waiting.timeout}</port.waiting.timeout>
                        <lra.tck.base.url>${lra.tck.base.url}</lra.tck.base.url>
                        <lra.http.recovery.host>${lra.http.recovery.host}</lra.http.recovery.host>
                        <lra.http.recovery.port>${lra.http.recovery.port}</lra.http.recovery.port>
                        <lra.http.recovery.path>${lra.http.recovery.path}</lra.http.recovery.path>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>debug.server</id>
            <activation>
                <property>
                    <name>debug.server</name>
                </property>
            </activation>
            <properties>
                <debug.server.args>-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</debug.server.args>
            </properties>
        </profile>
    </profiles>
</project>
